generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
    provider          = "postgres"
    url               = env("POSTGRES_PRISMA_URL")
    directUrl         = env("POSTGRES_URL_NON_POOLING")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    bio           String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accountType   Int       @default(0)

    //setup fields
    systemOS        String?
    osVersion       String?
    cpuArchitecture String?
    systemMemory    Int?
    daw             String?
    dawVersion      String?

    accounts                  Account[]
    Collection                Collection[]
    CollectionComment         CollectionComment[]
    sessions                  Session[]
    UserAchievement           UserAchievement[]
    UserCollectionAssociation UserCollectionAssociation[]
    UserVstAssociation        UserVstAssociation[]
    VstComment                VstComment[]
    UserExperience            UserVstExperience[]
}

// model ActivityFeedItem {
//     id        Int       @id @default(autoincrement())
//     type      Int
//     createdAt DateTime  @default(now())
//     updatedAt DateTime  @updatedAt
//     deletedAt DateTime?
//     userId    String

//     title       String?
//     description String?
//     actionType  String? // denormalized
//     data        Json? //  denormalized

//     user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//     hiddenAt DateTime?

//     @@index([userId], type: Hash)
// }

// model UserUserAssociation {
//     id Int @id @default(autoincrement())

//     forUserId String
//     toUserId  String

//     followAt DateTime?
//     blockAt  DateTime?

//     createdAt  DateTime  @default(now())
//     updatedAt  DateTime  @updatedAt
//     deletedAt  DateTime?
//     user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
//     associated User      @relation(fields: [associatedId], references: [id], onDelete: Cascade)

//     @@unique([userId, associatedId])
//     @@index([userId], type: Hash)
//     @@index([associatedId], type: Hash)
// }

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model UserVstAssociation {
    id        Int       @id @default(autoincrement())
    wantsAt   DateTime?
    ownsAt    DateTime?
    likesAt   DateTime?
    userId    String
    vstId     Int
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    vst       Vst       @relation(fields: [vstId], references: [id], onDelete: Cascade)

    @@unique([userId, vstId])
    @@index([userId, vstId])
}

model UserCollectionAssociation {
    id           Int        @id @default(autoincrement())
    likesAt      DateTime?
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt
    userId       String
    collectionId Int
    collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
    user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId, collectionId])
    @@index([userId], type: Hash)
    @@index([collectionId], type: Hash)
}

model VstCreator {
    id         Int       @id @default(autoincrement())
    name       String
    slug       String    @unique
    website    String?
    photoUrl   String?
    verifiedAt DateTime?
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt
    deletedAt  DateTime?
    vsts       Vst[]
}

model Collection {
    id            Int       @id @default(autoincrement())
    name          String
    slug          String?   @unique
    description   String?
    hasOrder      Boolean
    private       Boolean
    iconUrl       String?
    countLikes    Int       @default(0)
    countComments Int       @default(0)
    publishedAt   DateTime?
    popularDate   DateTime?
    featuredAt    DateTime?
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    deletedAt     DateTime?
    userId        String

    userName String? // denormalized

    user                       User                        @relation(fields: [userId], references: [id], onDelete: Cascade)
    comments                   CollectionComment[]
    collectionVsts             CollectionVst[]
    userCollectionAssociations UserCollectionAssociation[]

    @@index([popularDate], map: "popularDate")
    @@index([name], map: "name")
    @@index([slug], map: "slug", type: Hash)
    @@index([userId], type: Hash)
}

model CollectionVst {
    id           Int        @id @default(autoincrement())
    note         String?
    order        Int
    vstName      String?
    iconUrl      String?
    createdBy    String?
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt
    deletedAt    DateTime?
    collectionId Int
    vstId        Int
    properties   Json?
    collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
    vst          Vst        @relation(fields: [vstId], references: [id], onDelete: Cascade)

    @@index([collectionId], type: Hash)
}

model Vst {
    id                     Int                  @id @default(autoincrement())
    name                   String
    slug                   String               @unique
    version                String?
    overview               String?
    iconUrl                String?
    releasedDate           DateTime?
    officialUrl            String?
    popularDate            DateTime?
    featuredAt             DateTime?
    systemRequirements     Json?
    priceType              Int                  @default(0)
    bundleName             String?
    isInstrument           Boolean              @default(false)
    audioPreviewWithUrl    String?
    audioPreviewWithoutUrl String?
    complexityRating       Int?
    images                 Json?
    countLikes             Int                  @default(0)
    countOwns              Int                  @default(0)
    countWants             Int                  @default(0)
    countComments          Int                  @default(0)
    createdAt              DateTime             @default(now())
    updatedAt              DateTime             @updatedAt
    deletedAt              DateTime?
    creatorId              Int?
    creatorName            String?
    tags                   String[]
    collectionVst          CollectionVst[]
    userVstAssociations    UserVstAssociation[]
    creator                VstCreator?          @relation(fields: [creatorId], references: [id])
    comment                VstComment[]
    vstPropertys           VstProperty[]
    whereToFinds           WhereToFind[]
    userExperiences        UserVstExperience[] // New relation field

    @@index([tags], map: "idx_tags", type: Gin)
    @@index([isInstrument], map: "idx_isInstrument", type: Hash)
    @@index([deletedAt], type: Hash)
    @@index([createdAt], map: "idx_createdAt")
    @@index([countLikes], map: "idx_countLikes")
    @@index([name], map: "idx_name")
    @@index([slug], map: "idx_slug", type: Hash)
    @@index([creatorName], map: "idx_creatorName", type: Hash)
}

model UserVstExperience {
    id               Int       @id @default(autoincrement())
    userId           String
    vstId            Int
    systemOS         String?
    osVersion        String?
    cpuArchitecture  String?
    systemMemory     Int?
    daw              String?
    dawVersion       String?
    experienceRating Int
    deletedAt        DateTime?
    createdAt        DateTime  @default(now())
    user             User      @relation(fields: [userId], references: [id])
    vst              Vst       @relation(fields: [vstId], references: [id])
}

model VstProperty {
    id           Int       @id @default(autoincrement())
    name         String
    type         Int
    defaultValue String
    vstId        Int?
    createdAt    DateTime  @default(now())
    updatedAt    DateTime  @updatedAt
    deletedAt    DateTime?
    Vst          Vst?      @relation(fields: [vstId], references: [id])
}

model WhereToFind {
    id         Int    @id @default(autoincrement())
    currency   String
    url        String
    price      Int?
    vendorName String
    vendorId   Int?
    vstId      Int

    verificationsWithoutPriceCount Int       @default(0)
    lastVerifiedAt                 DateTime?

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?
    Vendor    Vendor?   @relation(fields: [vendorId], references: [id])
    Vst       Vst       @relation(fields: [vstId], references: [id], onDelete: Cascade)

    @@index([vstId], type: Hash)
}

model Vendor {
    id           Int           @id @default(autoincrement())
    name         String
    url          String
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt
    deletedAt    DateTime?
    whereToFinds WhereToFind[]
}

model VstComment {
    id                 Int       @id @default(autoincrement())
    text               String
    likes              Int       @default(0)
    dislikes           Int       @default(0)
    repliesToCommentId Int?
    createdAt          DateTime  @default(now())
    updatedAt          DateTime  @updatedAt
    deletedAt          DateTime?
    userId             String
    vstId              Int

    userName    String? // denormalized
    userIconUrl String? // denormalized

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    vst  Vst  @relation(fields: [vstId], references: [id], onDelete: Cascade)

    @@index([vstId], map: "vstId", type: Hash)
}

model CollectionComment {
    id                 Int       @id @default(autoincrement())
    text               String
    likes              Int       @default(0)
    dislikes           Int       @default(0)
    repliesToCommentId Int?
    createdAt          DateTime  @default(now())
    updatedAt          DateTime  @updatedAt
    deletedAt          DateTime?
    userId             String
    collectionId       Int

    userName    String? // denormalized
    userIconUrl String? // denormalized

    collection Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
    user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([collectionId], map: "collectionId", type: Hash)
}

model Achievement {
    id               Int               @id @default(autoincrement())
    name             String
    description      String
    badgeUrl         String?
    createdAt        DateTime          @default(now())
    updatedAt        DateTime          @updatedAt
    deletedAt        DateTime?
    userAchievements UserAchievement[]
}

model UserAchievement {
    id            Int         @id @default(autoincrement())
    level         Int
    createdAt     DateTime    @default(now())
    updatedAt     DateTime    @updatedAt
    deletedAt     DateTime?
    userId        String
    achievementId Int
    achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
    user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId], map: "userId", type: Hash)
}

model IngressEvent {
    id      Int    @id @default(autoincrement())
    model   Int
    payload Json
    url     String

    lastCheckedAt DateTime?
    checkCount    Int       @default(0)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([lastCheckedAt], map: "lastCheckedAt")
    @@index([model], map: "model")
}
